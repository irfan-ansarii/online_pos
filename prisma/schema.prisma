generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int       @id @default(autoincrement())
  firstName        String?
  lastName         String?
  email            String?   @unique
  phone            String?   @unique
  phoneConfirmedAt DateTime? @db.Timestamptz(6)
  emailConfirmedAt DateTime? @db.Timestamptz(6)
  status           Status    @default(invited)
  role             Role      @default(user)
  lastSignInAt     DateTime? @db.Timestamptz(6)
  createdAt        DateTime  @default(now())
  updatedaAt       DateTime  @updatedAt
  password         String?
  recoverySentAt   DateTime? @db.Timestamptz(6)
  invitedById      Int?      @unique
  recoveryOtp      String?
  locationId       Int?
  addresses        Address[]
  invitedBy        User?     @relation("InvitedBy", fields: [invitedById], references: [id])
  invitedByUser    User?     @relation("InvitedBy")
  location         Location? @relation(fields: [locationId], references: [id])

  @@map("users")
}

model Address {
  id         Int       @id @default(autoincrement())
  company    String?
  address    String?
  address2   String?
  city       String?
  state      String?
  zip        String?
  country    String?
  createdAt  DateTime  @default(now())
  updatedaAt DateTime  @updatedAt
  userId     Int?
  user       User?     @relation(fields: [userId], references: [id])
  location   Location?

  @@map("addresses")
}

model Location {
  id         Int          @id @default(autoincrement())
  type       LocationType @default(store)
  name       String
  phone      String
  email      String
  createdAt  DateTime     @default(now())
  updatedaAt DateTime     @updatedAt
  addressId  Int?         @unique
  inventory  Inventory[]
  address    Address?     @relation(fields: [addressId], references: [id])
  users      User[]

  @@map("locations")
}

model Product {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  type        Type          @default(simple)
  status      ProductStatus @default(active)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  variants    Variant[]

  @@map("products")
}

model Variant {
  id            Int         @id @default(autoincrement())
  productId     Int
  sku           String
  name          String
  purchasePrice Float
  salePrice     Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  inventory     Inventory[]
  label         Label[]
  product       Product     @relation(fields: [productId], references: [id])

  @@map("variants")
}

model Inventory {
  id         Int      @id @default(autoincrement())
  locationId Int
  variantId  Int
  stock      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  location   Location @relation(fields: [locationId], references: [id])
  variant    Variant  @relation(fields: [variantId], references: [id])

  @@map("inventory")
}

model Label {
  id         Int      @id @default(autoincrement())
  locationId Int
  variantId  Int
  count      Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  variant    Variant  @relation(fields: [variantId], references: [id])

  @@map("labels")
}

enum Status {
  invited
  active
  blocked
}

enum Role {
  admin
  user
  customer
  supplier
}

enum LocationType {
  store
  warehouse
}

enum Type {
  simple
  variable
}

enum ProductStatus {
  active
  archived
  trash
}
