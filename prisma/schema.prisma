generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int        @id @default(autoincrement())
  firstName        String?
  lastName         String?
  email            String?    @unique
  phone            String?    @unique
  phoneConfirmedAt DateTime?  @db.Timestamptz(6)
  emailConfirmedAt DateTime?  @db.Timestamptz(6)
  status           UserStatus @default(invited)
  role             UserRole   @default(user)
  lastSignInAt     DateTime?  @db.Timestamptz(6)
  createdAt        DateTime   @default(now())
  updatedaAt       DateTime   @updatedAt
  password         String?
  recoverySentAt   DateTime?  @db.Timestamptz(6)
  invitedById      Int?       @unique
  recoveryOtp      String?
  locationId       Int?
  addresses        Address[]
  customerSale     Sale[]     @relation("customerSale")
  employeeSale     Sale[]     @relation("employeeSale")
  location         Location?  @relation(fields: [locationId], references: [id], onDelete: SetNull)
  Purchase         Purchase[]

  @@map("users")
}

model Address {
  id         Int       @id @default(autoincrement())
  company    String?
  address    String?
  address2   String?
  city       String?
  state      String?
  zip        String?
  country    String?
  createdAt  DateTime  @default(now())
  updatedaAt DateTime  @updatedAt
  userId     Int?
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  location   Location?

  @@map("addresses")
}

model Location {
  id         Int          @id @default(autoincrement())
  type       LocationType @default(store)
  name       String
  phone      String
  email      String
  createdAt  DateTime     @default(now())
  updatedaAt DateTime     @updatedAt
  addressId  Int?         @unique
  inventory  Inventory[]
  address    Address?     @relation(fields: [addressId], references: [id], onDelete: SetNull)
  users      User[]

  @@map("locations")
}

model Product {
  id               Int                @id @default(autoincrement())
  title            String
  description      String
  type             ProductType        @default(simple)
  status           ProductStatus      @default(active)
  imageId          Int?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  options          Json?
  variants         Variant[]
  image            File?              @relation(fields: [imageId], references: [id], onDelete: SetNull)
  label            Label[]
  adjustment       Adjustment[]
  transferLineItem TransferLineItem[]
  LineItem         LineItem[]
  PurchaseLineItem PurchaseLineItem[]

  @@map("products")
}

model Variant {
  id               Int                @id @default(autoincrement())
  productId        Int
  sku              String?
  barcode          String?
  title            String
  purchasePrice    Float
  salePrice        Float
  option           Json?
  taxRate          Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  inventory        Inventory[]
  label            Label[]
  product          Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  transferLineItem TransferLineItem[]
  adjustment       Adjustment[]
  LineItem         LineItem[]
  PurchaseLineItem PurchaseLineItem[]

  @@map("variants")
}

model File {
  id        Int       @id @default(autoincrement())
  title     String
  caption   String
  width     Int?
  height    Int?
  ext       String
  mime      String
  size      Float
  src       String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[]
}

model Inventory {
  id         Int      @id @default(autoincrement())
  locationId Int
  variantId  Int
  stock      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  variant    Variant  @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@map("inventory")
}

model Label {
  id         Int         @id @default(autoincrement())
  locationId Int
  productId  Int
  variantId  Int
  quantity   Int         @default(1)
  status     LabelStatus @default(pending)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant    Variant     @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@map("labels")
}

model Adjustment {
  id         Int      @id @default(autoincrement())
  locationId Int
  productId  Int
  variantId  Int
  quantity   Int
  reason     String
  notes      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant    Variant  @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@map("adjustments")
}

model Transfer {
  id          Int                @id @default(autoincrement())
  fromId      Int
  toId        Int
  status      TransferStatus     @default(pending)
  notes       String?
  totalItems  Int
  totalAmount Float
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  lineItems   TransferLineItem[]

  @@map("transfers")
}

model TransferLineItem {
  id           Int      @id @default(autoincrement())
  transferId   Int
  variantId    Int?
  productId    Int?
  title        String
  variantTitle String?
  sku          String
  barcode      String
  price        Float
  quantity     Int
  total        Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  product      Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  variant      Variant? @relation(fields: [variantId], references: [id], onDelete: SetNull)
  transfer     Transfer @relation(fields: [transferId], references: [id], onDelete: Cascade)

  @@map("transfer_line_items")
}

model Sale {
  id              Int             @id @default(autoincrement())
  locationId      Int
  title           String
  customerId      Int?
  employeeId      Int?
  billingAddress  Json?
  shippingAddress Json?
  subtotal        Float
  saleType        String          @default("state")
  taxType         String          @default("included")
  totalTax        Float
  totalDiscount   Float
  roundedOff      Float
  invoiceTotal    Float
  total           Float
  totalDue        Float
  taxLines        Json?
  status          FinancialStatus @default(pending)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  lineItems       LineItem[]
  customer        User?           @relation("customerSale", fields: [customerId], references: [id], onDelete: SetNull)
  employee        User?           @relation("employeeSale", fields: [employeeId], references: [id], onDelete: SetNull)
  transactions    Transaction[]

  @@map("sales")
}

model LineItem {
  id            Int      @id @default(autoincrement())
  locationId    Int
  saleId        Int
  title         String
  variantTitle  String?
  sku           String?
  barcode       String?
  price         Float
  taxRate       Int
  kind          String   @default("sale") // sale|return
  quantity      Int
  totalDiscount Float
  totalTax      Float
  total         Float
  status        String?  @default("sold") // sold, return
  taxLines      Json
  productId     Int?
  variantId     Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  sale          Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product       Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  variant       Variant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  @@map("line_items")
}

model Transaction {
  id         Int             @id @default(autoincrement())
  saleId     Int
  locationId Int
  name       String
  label      String
  amount     Float
  kind       TransactionKind
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  sale       Sale            @relation(fields: [saleId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model GiftCard {
  id           Int      @id @default(autoincrement())
  code         String
  customerId   Int?
  initialValue Decimal
  balance      Decimal
  expiresOn    DateTime
  note         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Payment {
  id        Int      @id @default(autoincrement())
  name      String
  label     String
  type      String   @default("sale") // sale, purchase
  position  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}

model Purchase {
  id            Int                   @id @default(autoincrement())
  locationId    Int
  title         String
  supplierId    Int?
  purchaseType  String                @default("state")
  subtotal      Float
  taxType       String                @default("included")
  totalTax      Float
  totalDiscount Float
  roundedOff    Float
  invoiceTotal  Float
  total         Float
  totalDue      Float
  taxLines      Json?
  status        FinancialStatus       @default(pending)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  supplier      User?                 @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  lineItems     PurchaseLineItem[]
  transactions  PurchaseTransaction[]

  @@map("purchase")
}

model PurchaseLineItem {
  id            Int      @id @default(autoincrement())
  locationId    Int
  purchaseId    Int
  title         String
  variantTitle  String?
  sku           String?
  barcode       String?
  price         Float
  taxRate       Int
  kind          String   @default("purchase")
  quantity      Int
  totalDiscount Float
  totalTax      Float
  total         Float
  taxLines      Json
  productId     Int?
  variantId     Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  purchase      Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  product       Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  variant       Variant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  @@map("purchase_line_items")
}

model PurchaseTransaction {
  id             Int                     @id @default(autoincrement())
  purchaseId     Int
  locationId     Int
  name           String
  label          String
  refrenceNumber String
  amount         Float
  kind           PurchaseTransactionKind
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  purchase       Purchase                @relation(fields: [purchaseId], references: [id], onDelete: Cascade)

  @@map("purchase_transactions")
}

enum FinancialStatus {
  pending
  paid
  partialy_paid
  refunded
  partialy_refunded
  returned
}

enum TransactionKind {
  sale
  void
  refund
}

enum PurchaseTransactionKind {
  purchase
  void
  refund
}

enum UserStatus {
  invited
  active
  blocked
}

enum UserRole {
  admin
  user
  customer
  supplier
}

enum LocationType {
  store
  warehouse
}

enum ProductType {
  simple
  variable
}

enum ProductStatus {
  active
  archived
  trash
}

enum LabelStatus {
  pending
  printed
  cancelled
}

enum TransferStatus {
  pending
  accepted
  rejected
  partial
  cancelled
}
