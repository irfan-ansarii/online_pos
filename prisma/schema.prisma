generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int       @id @default(autoincrement())
  firstName        String?
  lastName         String?
  email            String?   @unique
  phone            String?   @unique
  phoneConfirmedAt DateTime? @db.Timestamptz(6)
  emailConfirmedAt DateTime? @db.Timestamptz(6)
  status           Status    @default(invited)
  role             Role      @default(user)
  lastSignInAt     DateTime? @db.Timestamptz(6)
  createdAt        DateTime  @default(now())
  updatedaAt       DateTime  @updatedAt
  password         String?
  recoverySentAt   DateTime? @db.Timestamptz(6)
  invitedById      Int?      @unique
  recoveryOtp      String?
  locationId       Int?
  addresses        Address[]
  customer         Sale[]    @relation("customer")
  employee         Sale[]    @relation("employee")
  invitedBy        User?     @relation("InvitedBy", fields: [invitedById], references: [id])
  invitedByUser    User?     @relation("InvitedBy")
  location         Location? @relation(fields: [locationId], references: [id])

  @@map("users")
}

model Address {
  id         Int       @id @default(autoincrement())
  company    String?
  address    String?
  address2   String?
  city       String?
  state      String?
  zip        String?
  country    String?
  createdAt  DateTime  @default(now())
  updatedaAt DateTime  @updatedAt
  userId     Int?
  user       User?     @relation(fields: [userId], references: [id])
  location   Location?

  @@map("addresses")
}

model Location {
  id         Int          @id @default(autoincrement())
  type       LocationType @default(store)
  name       String
  phone      String
  email      String
  createdAt  DateTime     @default(now())
  updatedaAt DateTime     @updatedAt
  addressId  Int?         @unique
  inventory  Inventory[]
  address    Address?     @relation(fields: [addressId], references: [id])
  users      User[]

  @@map("locations")
}

model Product {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  type        Type          @default(simple)
  status      ProductStatus @default(active)
  imageId     Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  options     Json?
  variants    Variant[]
  image       File          @relation(fields: [imageId], references: [id])

  @@map("products")
}

model Variant {
  id            Int         @id @default(autoincrement())
  productId     Int
  sku           String
  title         String
  purchasePrice Float
  salePrice     Float
  option        Json?
  taxRate       Int
  stock         Int?        @default(0)
  sold          Int?        @default(0)
  return        Int?        @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  inventory     Inventory[]
  label         Label[]
  product       Product     @relation(fields: [productId], references: [id])

  @@map("variants")
}

model File {
  id        Int       @id @default(autoincrement())
  title     String
  caption   String
  width     Int?
  height    Int?
  ext       String
  mime      String
  size      Float
  src       String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[]
}

model Inventory {
  id         Int      @id @default(autoincrement())
  locationId Int
  variantId  Int
  stock      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  location   Location @relation(fields: [locationId], references: [id])
  variant    Variant  @relation(fields: [variantId], references: [id])

  @@map("inventory")
}

model Label {
  id         Int      @id @default(autoincrement())
  locationId Int
  variantId  Int
  count      Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  variant    Variant  @relation(fields: [variantId], references: [id])

  @@map("labels")
}

model Sale {
  id              Int                 @id @default(autoincrement())
  locationId      Int
  title           String
  customerId      Int
  employeeId      Int
  billingAddress  Json?
  shippingAddress Json?
  lineItemsTotal  Float
  subtotal        Float
  totalTax        Float
  totalDiscount   Float
  roundedOff      Float               @default(0)
  total           Float
  totalDue        Float
  taxLines        Json?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  status          SaleFinancialStatus @default(pending)
  taxType         String              @default("included")
  lineItems       LineItem[]
  customer        User?               @relation("customer", fields: [customerId], references: [id])
  employee        User?               @relation("employee", fields: [employeeId], references: [id])
  transactions    Transaction[]

  @@map("sales")
}

model LineItem {
  id            Int      @id @default(autoincrement())
  locationId    Int
  saleId        Int
  title         String
  variantTitle  String?
  sku           String
  price         Float
  taxRate       Int
  quantity      Float
  totalDiscount Float
  totalTax      Float
  total         Float
  taxLines      Json
  productId     Int
  variantId     Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  sale          Sale     @relation(fields: [saleId], references: [id])

  @@map("line_items")
}

model Transaction {
  id         Int               @id @default(autoincrement())
  saleId     Int
  locationId Int
  name       String
  amount     Float
  kind       TransactionKind
  status     TransactionStatus @default(pending)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  sale       Sale              @relation(fields: [saleId], references: [id])

  @@map("transactions")
}

enum SaleFinancialStatus {
  pending
  paid
  partialy_paid
  partially_refunded
  refunded
  voided
}

enum TransactionKind {
  sale
  void
  refund
}

enum TransactionStatus {
  pending
  failure
  success
}

enum Status {
  invited
  active
  blocked
}

enum Role {
  admin
  user
  customer
  supplier
}

enum LocationType {
  store
  warehouse
}

enum Type {
  simple
  variable
}

enum ProductStatus {
  active
  archived
  trash
}
